{"version":3,"sources":["Formula.ts","DPLL.tsx","Resolution.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseFormula","formula","JSON","parse","replaceAll","replace","setVariable","parsedFormula","variable","filter","clause","includes","map","literal","invertLiteral","split","stringifyFormula","stringify","Title","Typography","DPLLAlgorithm","next","options","oneLiterals","length","x","getOneLiterals","OLR","name","children","pureLiterals","literals","flat","nonNegatedLiterals","negatedLiterals","concat","Set","getPureLiterals","PLR","getLiterals","DPLLComponent","props","useState","useOLR","setUseOLR","usePLR","setUsePLR","result","onClick","checked","unCheckedChildren","checkedChildren","id","style","width","height","orientation","data","pairwise","canApplyResolution","f1","f2","some","getLiteralToRemove","arrayIntersection","array1","array2","value","isClausePresent","ResolutionAlgorithm","newFormula","literalToRemove","clauseToAdd","push","parent","iterable","iterator","Symbol","current","done","ResolutionComponent","cy","parsedFormulaWithParent","resultDifferences","slice","a","b","y","colors","vertices","clausesAtLevel","row","col","color","edges","source","target","useEffect","unmount","ref","cytoscape","layout","position","node","container","elements","selector","e","ErrorBoundary","state","hasError","error","errorInfo","this","React","Component","App","setFormula","show","setShow","useResolution","setUseResoltion","onChange","evt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63d19ee3.chunk.js","sourcesContent":["export type ParsedFormula = Array<Array<string>>\r\nexport const parseFormula = (formula: string): ParsedFormula => {\r\n    return JSON.parse(formula.replaceAll(\"{\", \"[\").replaceAll(\"}\", \"]\").replace(/(¬?[a-z]+)/g, '\"$1\"'));\r\n}\r\n\r\nexport const getLiterals = (parsedFormula: ParsedFormula) => {\r\n    // @ts-ignore\r\n    return [...new Set(parsedFormula.flat())];\r\n}\r\n\r\nexport const setVariable = (parsedFormula: ParsedFormula, variable: string) => {\r\n    return parsedFormula.filter(clause => !clause.includes(variable)).map(clause => clause.filter(literal => invertLiteral(literal) !==\r\n                                                                                                             variable));\r\n}\r\n\r\nexport const invertLiteral = (literal: string) => {\r\n    if (literal.includes(\"¬\")) {\r\n        return literal.split(\"¬\")[1];\r\n    } else return \"¬\" + literal;\r\n}\r\n\r\nexport const stringifyFormula = (formula : ParsedFormula) : string =>\r\n{\r\n    return JSON.stringify(formula).replaceAll(\"[\",\"{\").replaceAll(\"]\",\"}\").replaceAll('\"',\"\");\r\n}\r\n","import React, {useState} from \"react\";\r\nimport Tree from 'react-d3-tree'\r\nimport {getLiterals, invertLiteral, ParsedFormula, parseFormula, setVariable, stringifyFormula} from \"./Formula\";\r\nimport {Switch, Typography} from \"antd\";\r\nconst {Title} = Typography\r\n\r\n\r\nconst getOneLiterals = (parsedFormula: ParsedFormula): Array<string> => {\r\n    return parsedFormula.filter(clause => clause.length === 1).map(x => x[0]);\r\n}\r\n\r\nconst getPureLiterals = (parsedFormula: ParsedFormula): Array<string> => {\r\n    let literals = parsedFormula.flat();\r\n    let nonNegatedLiterals = literals.filter(literal => !literal.includes(\"¬\"))\r\n    let negatedLiterals = literals.filter(literal => literal.includes(\"¬\")).map(literal => literal.split(\"¬\")[1])\r\n    let pureLiterals = nonNegatedLiterals.filter(x => !negatedLiterals.includes(x)).concat(\r\n        negatedLiterals.filter(x => !nonNegatedLiterals.includes(x)).map(x => \"¬\" + x)\r\n    );\r\n    // @ts-ignore\r\n    return [...new Set(pureLiterals)];\r\n}\r\n\r\n\r\n\r\nconst DPLLAlgorithm = (parsedFormula: ParsedFormula, next : string, options: { OLR: boolean, PLR: boolean }): any => {\r\n    let oneLiterals = getOneLiterals(parsedFormula);\r\n    if (options.OLR && oneLiterals.length > 0) {\r\n        return {\r\n            name: next + \" \" + stringifyFormula(parsedFormula),\r\n            children: [DPLLAlgorithm(setVariable(parsedFormula,  oneLiterals[0]), \"OLR \" + oneLiterals[0], options)]\r\n        };\r\n    }\r\n    let pureLiterals = getPureLiterals(parsedFormula);\r\n    if (options.PLR && pureLiterals.length > 0) {\r\n        return {\r\n            name: next + \" \" + stringifyFormula(parsedFormula),\r\n            children: [DPLLAlgorithm(setVariable(parsedFormula, pureLiterals[0]), \"PLR \" + pureLiterals[0], options)]\r\n        };\r\n    }\r\n    let literals = getLiterals(parsedFormula);\r\n    if (literals.length > 1) {\r\n        return {\r\n            name: next + \" \" + stringifyFormula(parsedFormula),\r\n            children: [\r\n                DPLLAlgorithm(setVariable(parsedFormula, literals[0]), \"CASE \" + literals[0] + \" : \", options),\r\n                DPLLAlgorithm(setVariable(parsedFormula, invertLiteral(literals[0])), \"CASE \" + invertLiteral(literals[0]) + \" : \", options)\r\n            ]\r\n        }\r\n    }\r\n    else if(literals.length == 1)\r\n    {\r\n        return {\r\n            name: next + \" \" + JSON.stringify(parsedFormula),\r\n            children: [\r\n                DPLLAlgorithm(setVariable(parsedFormula, literals[0]), \"CASE \" + literals[0] + \" : \", options),\r\n            ]\r\n        }\r\n    }\r\n    return {name: next + \" \" + JSON.stringify(parsedFormula)}\r\n}\r\n\r\n\r\nexport const DPLLComponent = (props : {formula : string}) => {\r\n    let parsedFormula = parseFormula(props.formula)\r\n    let [useOLR, setUseOLR] = useState<boolean>(false)\r\n    let [usePLR, setUsePLR] = useState<boolean>(false)\r\n    var result = DPLLAlgorithm(parsedFormula, \"START\", {OLR: useOLR, PLR: usePLR});\r\n    return (\r\n        <div>\r\n            <Title>DPLL</Title>\r\n            <Switch onClick={()=>{setUsePLR(!usePLR)}} checked={usePLR} unCheckedChildren={<>NO PLR</>} checkedChildren={<>PLR</>}/>\r\n            <Switch onClick={()=>{setUseOLR(!useOLR)}} checked={useOLR} unCheckedChildren={<>NO OLR</>} checkedChildren={<>OLR</>}/>\r\n        <div id=\"treeWrapper\" style={{width: '100vw', height: '90vh'}}>\r\n            <Tree orientation={'vertical'} data={result}/>\r\n        </div>\r\n        </div>\r\n    );\r\n}","import {invertLiteral, ParsedFormula, parseFormula, stringifyFormula} from \"./Formula\";\r\nimport React, {useEffect} from \"react\";\r\n// @ts-ignore\r\nimport cytoscape from 'cytoscape';\r\n\r\n\r\nconst canApplyResolution = (f1: Array<string>, f2: Array<string>) => {\r\n    return f1.some(literal => f2.includes(invertLiteral(literal)));\r\n}\r\n\r\nlet getLiteralToRemove = (f1: Array<string>, f2: Array<string>): string => {\r\n    return f1.filter(literal => f2.includes(invertLiteral(literal)))[0];\r\n}\r\n\r\n\r\nfunction arrayIntersection<T>(array1: Array<T>, array2: Array<T>) {\r\n    return array1.filter(value => array2.includes(value));\r\n}\r\n\r\nfunction arrayDifference(array1: Array<Clause>, array2: Array<Clause>) {\r\n    return array1.filter(x => !array2.some(y => arrayIntersection(x.formula, y.formula).length === y.formula.length));\r\n}\r\n\r\nconst isClausePresent = (clause: Array<string>, parsedFormula: ParsedFormula) => {\r\n    return parsedFormula.some(x => arrayIntersection(clause, x).length === x.length);\r\n}\r\n\r\nconst isTautology = (clause: Array<string>) => {\r\n    return clause.some(literal => clause.includes(invertLiteral(literal)));\r\n}\r\n\r\ntype Clause = { formula: Array<string>, parent: Array<string> | null }\r\ntype ResolutionAlgorithmResult = Array<Clause>;\r\nconst ResolutionAlgorithm = (parsedFormula: ResolutionAlgorithmResult): Array<ResolutionAlgorithmResult> => {\r\n    let newFormula: ResolutionAlgorithmResult = JSON.parse(JSON.stringify(parsedFormula))\r\n    for (let f1 of parsedFormula) {\r\n        for (let f2 of parsedFormula) {\r\n            if (canApplyResolution(f1.formula, f2.formula)) {\r\n                let literalToRemove = getLiteralToRemove(f1.formula, f2.formula);\r\n                // @ts-ignore\r\n                let clauseToAdd = [...new Set(f1.formula.concat(f2.formula).filter(literal => literal !==\r\n                                                                                              literalToRemove &&\r\n                                                                                              literal !==\r\n                                                                                              invertLiteral(literalToRemove)))];\r\n                if (!isTautology(clauseToAdd) && !isClausePresent(clauseToAdd, newFormula.map(x => x.formula))) {\r\n                    newFormula.push({formula: clauseToAdd, parent: f1.formula})\r\n                }\r\n                if (clauseToAdd.length === 0) {\r\n                    return [parsedFormula, newFormula];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (newFormula.length == parsedFormula.length) {\r\n        return [];\r\n    } else {\r\n        return [parsedFormula, ...ResolutionAlgorithm(newFormula)];\r\n    }\r\n    return [];\r\n}\r\n\r\n\r\nfunction* pairwise<T>(iterable: Iterable<T>) {\r\n    const iterator = iterable[Symbol.iterator]()\r\n    let current = iterator.next()\r\n    let next = iterator.next()\r\n    while (!current.done) {\r\n        yield [current.value, next.value]\r\n        current = next\r\n        next = iterator.next()\r\n    }\r\n}\r\n\r\n\r\nexport const ResolutionComponent = (props: { formula: string }) => {\r\n    let parsedFormula = parseFormula(props.formula)\r\n    let parsedFormulaWithParent: ResolutionAlgorithmResult = parsedFormula.map((x) => (\r\n        {formula: x, parent: null}\r\n    ))\r\n    var result = ResolutionAlgorithm(parsedFormulaWithParent);\r\n    // @ts-ignore\r\n    let resultDifferences = [parsedFormulaWithParent, ...[...pairwise(result)].slice(0, -1).map(([a, b]) => arrayDifference(b, a))]\r\n    let colors = [\"#ef5350\", \"#EC407A\", \"#AB47BC\", \"#7E57C2\", \"#5C6BC0\", \"#42A5F5\", \"#29B6F6\", \"#26C6DA\"]\r\n    let vertices = resultDifferences.map((clausesAtLevel, row) =>\r\n        clausesAtLevel.map((clause: any, col ) => (\r\n            {data: {id: stringifyFormula(clause.formula), row : row, col : col, color : colors[row]}}\r\n        ))).flat();\r\n    let edges = result[result.length - 1].filter(x => x.parent != null).map(clause => (\r\n        {\r\n            data: {source: stringifyFormula(clause.parent as any), target: stringifyFormula(clause.formula as any)}\r\n        }\r\n    ));\r\n    var cy : any;\r\n    \r\n    useEffect(()=>{\r\n     return ()=>{\r\n         cy.unmount();\r\n     }\r\n    }, [])\r\n\r\n    return (\r\n        <div ref={(ref) => {\r\n            try {\r\n                cy = cytoscape({\r\n                    layout: {\r\n                        name: 'grid',\r\n                        position: (node) => {\r\n                            return {row: node.data(\"row\"), col: node.data(\"col\")}\r\n                        }\r\n                    },\r\n                    container: ref,\r\n                    elements: [\r\n                        ...vertices,\r\n                        ...edges,\r\n                    ],\r\n\r\n                    style: [ // the stylesheet for the graph\r\n                        {\r\n                            selector: 'node',\r\n                            style: {\r\n                                'background-color': 'data(color)',\r\n                                'label': 'data(id)'\r\n                            }\r\n                        },\r\n\r\n                        {\r\n                            selector: 'edge',\r\n                            style: {\r\n                                'width': 3,\r\n                                'line-color': '#ccc',\r\n                                'target-arrow-color': '#ccc',\r\n                                'target-arrow-shape': 'triangle',\r\n                                'curve-style': 'bezier'\r\n                            }\r\n                        }\r\n                    ],\r\n                });\r\n            }\r\n            catch (e)\r\n            {\r\n\r\n            }\r\n        }} style={{width: '100vw', height: '100vh'}}>\r\n            </div>\r\n            );\r\n        }\r\n","import {Switch} from 'antd';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {DPLLComponent} from './DPLL';\nimport {ResolutionComponent} from \"./Resolution\";\n\nclass ErrorBoundary extends React.Component {\n    constructor(props : any) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error : any) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error : any, errorInfo: any) {\n\n    }\n\n    render() {\n        if ((this.state as any).hasError) {\n            return <h1>I mean you did not seriously expect me to make this bug free did you, F5, and pray it doesn't crash</h1>;\n        }\n\n        return this.props.children;\n    }\n}\n\n\nfunction App() {\n    let [formula, setFormula] = useState<string>();\n    let [show, setShow] = useState<boolean>(false);\n    let [useResolution, setUseResoltion] = useState<boolean>(true);\n\n    return (\n        <div>\n            <ErrorBoundary>\n            <input\n                value={formula}\n                onChange={(evt) => {\n                    setFormula(evt.target.value);\n                }}/>\n            <Switch onClick={() => {\n                setUseResoltion(!useResolution)\n            }} checked={useResolution} unCheckedChildren={<>DPML</>} checkedChildren={<>Resolution</>}/>\n            <button onClick={() => {\n                setShow(true)\n            }}>Go\n            </button>\n            {show && !useResolution && <DPLLComponent formula={formula as string}/>}\n            {show && useResolution && <ResolutionComponent formula={formula as string}/>}\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}